import{L as a,q as o}from"./BB8S3bsN.js";import{a as t}from"./E7Gj0k-g.js";const h=a({id:"auth",state:()=>({teams:[],users:[],accessToken:localStorage.getItem("accessToken")||"",refreshToken:localStorage.getItem("refreshToken")||""}),getters:{getTeams:e=>e.teams,getUsers:e=>e.users,getAccessToken:e=>e.accessToken,getRefreshToken:e=>e.refreshToken},actions:{async login(e){try{const r=await t.post("/auth/login/",e);return this.accessToken=r.data.access,this.refreshToken=r.data.refresh,localStorage.setItem("accessToken",r.data.access),localStorage.setItem("refreshToken",r.data.refresh),r.data}catch(r){throw alert("Wrong credentials..."),console.error(r),r}},async refreshAccessToken(){try{const e=await t.post("/auth/login/refresh/",{refresh:this.refreshToken});return this.accessToken=e.data.access,localStorage.setItem("accessToken",e.data.access),e.data}catch(e){throw alert(e),console.error(e),e}},async logout(){try{const e=await t.post("/auth/logout/",{refresh:this.refreshToken});return this.accessToken="",this.refreshToken="",localStorage.removeItem("accessToken"),localStorage.removeItem("refreshToken"),o("/auth"),e.data}catch(e){throw alert(e),console.error(e),e}},async fetchTeams(){try{const e=await t.get("/auth/teams/");this.teams=e.data}catch(e){alert(e),console.error(e)}},async createTeam(e){try{return(await t.post("/auth/teams/",e)).data}catch(r){alert(r),console.error(r)}},async getTeamById(e){try{return(await t.get(`/auth/teams/${e}/`)).data}catch(r){alert(r),console.error(r)}},async updateTeam(e,r){try{return(await t.put(`/auth/teams/${e}/`,r)).data}catch(s){alert(s),console.error(s)}},async patchTeam(e,r){try{return(await t.patch(`/auth/teams/${e}/`,r)).data}catch(s){alert(s),console.error(s)}},async deleteTeam(e){try{return(await t.delete(`/auth/teams/${e}/`)).data}catch(r){alert(r),console.error(r)}},async removeEmployeesFromTeam(e){try{return(await t.patch(`/auth/teams/${e}/remove-employees/`)).data}catch(r){alert(r),console.error(r)}},async fetchUsers(){try{const e=await t.get("/auth/users/");this.users=e.data}catch(e){alert(e),console.error(e)}},async createUser(e){try{return(await t.post("/auth/users/",e)).data}catch(r){alert(r),console.error(r)}},async getUserById(e){try{return(await t.get(`/auth/users/${e}/`)).data}catch(r){alert(r),console.error(r)}},async updateUser(e,r){try{return(await t.put(`/auth/users/${e}/`,r)).data}catch(s){alert(s),console.error(s)}},async patchUser(e,r){try{return(await t.patch(`/auth/users/${e}/`,r)).data}catch(s){alert(s),console.error(s)}},async getCurrentUser(){try{return(await t.get("/auth/users/current/")).data}catch(e){alert(e),console.error(e)}}}});export{h as u};
