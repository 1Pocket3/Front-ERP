// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API –ª–∏–¥–æ–≤
// –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ /leads

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API –ª–∏–¥–æ–≤...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
async function testLeadsAPI() {
  const baseURL = 'http://127.0.0.1:8000/leads';
  
  try {
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤
    console.log('üìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤...');
    const response = await fetch(`${baseURL}/list/`, {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –°–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω:', data);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤:', response.status, response.statusText);
    }
    
    // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–∏–¥–∞
    console.log('üìù –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–∏–¥–∞...');
    const testLead = {
      first_name: '–¢–µ—Å—Ç',
      last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      phone: '+7-900-123-45-67',
      email: 'test@example.com',
      company: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
      lead_source: '–¢–µ—Å—Ç'
    };
    
    const createResponse = await fetch(`${baseURL}/`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testLead)
    });
    
    if (createResponse.ok) {
      const createdLead = await createResponse.json();
      console.log('‚úÖ –õ–∏–¥ —Å–æ–∑–¥–∞–Ω:', createdLead);
      
      // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ª–∏–¥–∞
      console.log('üîç –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ª–∏–¥–∞...');
      const getResponse = await fetch(`${baseURL}/${createdLead.id}/`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (getResponse.ok) {
        const leadData = await getResponse.json();
        console.log('‚úÖ –õ–∏–¥ –ø–æ–ª—É—á–µ–Ω:', leadData);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–∞:', getResponse.status, getResponse.statusText);
      }
      
      // –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞
      console.log('‚úèÔ∏è –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞...');
      const updateData = {
        ...testLead,
        company: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è'
      };
      
      const updateResponse = await fetch(`${baseURL}/${createdLead.id}/`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(updateData)
      });
      
      if (updateResponse.ok) {
        const updatedLead = await updateResponse.json();
        console.log('‚úÖ –õ–∏–¥ –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedLead);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞:', updateResponse.status, updateResponse.statusText);
      }
      
      // –¢–µ—Å—Ç 5: –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–¥–∞
      console.log('üóëÔ∏è –¢–µ—Å—Ç 5: –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–¥–∞...');
      const deleteResponse = await fetch(`${baseURL}/${createdLead.id}/`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (deleteResponse.ok) {
        console.log('‚úÖ –õ–∏–¥ —É–¥–∞–ª–µ–Ω');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–¥–∞:', deleteResponse.status, deleteResponse.statusText);
      }
      
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞:', createResponse.status, createResponse.statusText);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function checkAuth() {
  const token = localStorage.getItem('accessToken');
  if (!token) {
    console.error('‚ùå –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');
    return false;
  }
  console.log('‚úÖ –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω');
  return true;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (checkAuth()) {
  testLeadsAPI();
} else {
  console.log('üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ /auth');
}
